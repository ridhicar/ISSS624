---
title: "Hands-on_Ex3"
editor: visual
---

# 5 Geographical Segmentation with Spatially Constrained Clustering Techniques

## Overview

In this hands-on exercise, we will gain hands-on experience on how to delineate homogeneous region by using geographically referenced multivariate data. There are two major analysis, namely:

-   hierarchical cluster analysis; and

-   spatially constrained cluster analysis.

In this exercise, we are interested to delineate Shan State, Myanmar into homogeneous regions by using multiple Information and Communication technology (ICT) measures, namely,: Radio, TV, Land-line, mobile phone, Computer and Internet at home.

## Getting Started

We need to first load the necessary R packages. For the purpose of this in-class exercise, there are two packages that will be used. They are:

-   **spdep**, **rgdal** for spatial data handling.

-   **sf** for importing and processing geo-spatial data.

-   **tmap** for visualizing spatial data distributions in Chloropleth thematic maps.

-   **coorplot**, **ggpubr** and **heatmaply** for multivariate data visualization and analysis.

-   **cluster** and **ClustGeo** for cluster analysis.

-   **tidyverse** for importing and processing non-spatial data sets (attribute data handling). Under tidyverse:

    -   **readr** package will be used to import wkt data.

    -   **dyplr** package will be used to wrangle the data.

    -   **ggplot2** will be used to visualize the data.

    The code chunk below installs and launches the above R packages onto the R environment.

```{r}
pacman::p_load(rgdal, spdep, tmap, sf, ClustGeo, 
               ggpubr, cluster, factoextra, NbClust,
               heatmaply, corrplot, psych, tidyverse)
```

Note: With **tidyverse**, we do not have to install **readr**, **ggplot2** and **dplyr** packages separately. In fact, **tidyverse** also installs other very useful R packages such as **tidyr**.

## Data import and Preparation

### Importing geospatial data into the R environment

In this section, we will import the first data set that will be used in this study, the Myanmar Township Boundary GIS data and its associated attributed table into the R environment.

The Myanmar Township Boundary GIS data is in ESRI shapefile format, it consists of township boundary information of Myanmar. The spatial data are captured in polygon features.

We will first download the layer as a zipped shapefile mmr_polbnda_adm3_mimu_250k from https://geonode.themimu.info/layers/geonode%3Ammr_polbnda_adm3_mimu_250k or directly from elearn. We can extract the zipped file and rename folder *myanmar_township_boundaries* for easier calling of shapefile and representation.

This file will be imported into the R environment using the *st_read()* function of **sf** library.

The code chunks are used are shown below:

```{r}
shan_sf <- st_read(dsn = "/Users/ridz/ridhicar/ISSS624/Hands-On_Ex/Hands-on_Ex3/data/data/geospatial", 
                   layer = "myanmar_township_boundaries") %>%
  filter(ST %in% c("Shan (East)", "Shan (North)", "Shan (South)")) %>%
  select(c(2:7))
```

The imported township boundary object is called *shan_sf*. It is saved in a **simple feature data.frame** format. We can view the content of the newly created *shan_sf* simple features data.frame by using the code chunk below:

```{r}
shan_sf
```

The simple feature data.frame is conformed to Hardy Wickham's tidy framework. Therefor, we can also *glimpse()* to reveal the data type of it's fields.

```{r}
glimpse(shan_sf)
```

### Importing aspatial data into the R environment

In this section, we will import the second data set that will be used in this study, Shan-ICT.csv. This is an extract of the 2014 Myanmar Population and Housing Census Myanmar at the township level.

We can download this directly from the website https://themimu.info/ or from elearn.

This file will be imported into the R environment using the *read_csv()* function of **readr** of **tidyverse** library.

The code chunks are used are shown below:

```{r}
ict <- read_csv ("/Users/ridz/ridhicar/ISSS624/Hands-On_Ex/Hands-on_Ex3/data/data/aspatial/Shan-ICT.csv")
```

The data is saved in R's \*tibble data.frame\* format.

The code chunk below shows the summary statistics of the *ict* data.frame.

```{r}
summary(ict)
```

The result above shows that there are a total of 11 fields and 55 observations in the tibble data.frame.

## Data Wrangling

It is wiser to normalize the data to compare i.e., to take the value as a proportion of no. of households present instead of using the numbers directly. Using the numbers directly will be bias by the underlying total number of households. In general, the townships with relatively higher total number of households will also have a higher number of households owning radio, TV etc.

The code chunk below preprocesses the data accordingly by deriving the penetration rate of each ICT variable.

```{r}
ict_derived <- ict %>%
  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %>%
  mutate(`TV_PR` = `Television`/`Total households`*1000) %>%
  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %>%
  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %>%
  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %>%
  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %>%
  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,
         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,
         `TT_HOUSEHOLDS`=`Total households`,
         `RADIO`=`Radio`, `TV`=`Television`, 
         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,
         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) 
```

The code chunk below then verifies if the new columns have been added by using *colnames()*.

```{r}
colnames(ict_derived)
```

The result above shows that there are 6 new fields, namely, RADIO_PR, TV_PR, LLPHONE_PR, MPHONE_PR, COMPUTER_PR, and INTERNET_PR added to the ict_derived data.frame.

## Exploratory Data Analysis

In this section, we will perform some exploratory data analysis to visualize and therefore, better understand the data we have.

The code chunk below plots a histogram displaying the number of radio users in the data set.

```{r}
ggplot(data=ict_derived, 
       aes(x=`RADIO`,
           y= ..density..)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")+
  geom_density(color="red",
               alpha=0.2)
```

The code chunk below detects if there are any outliers using a boxplot.

```{r}
ggplot(data=ict_derived, 
       aes(x=`RADIO`)) +
  geom_boxplot(color="black", 
               fill="light blue")
```

The code chunk below plots the distribution of the newly derived variables such as Radio penetration rate.

```{r}
ggplot(data=ict_derived, 
       aes(x=`RADIO_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")
```

```{r}
ggplot(data=ict_derived, 
       aes(x=`RADIO_PR`)) +
  geom_boxplot(color="black", 
               fill="light blue")
```

???

The figure below, shows multiple histograms plotted to reveal the distribution of the new variables in the ict_derived data.frame.

The code chunk below are used to create the data visualization. They consist of two main parts. First, we will create the individual histograms. Next, we will the *ggarange()* function of **ggpubr** package to group histograms together.

```{r}
radio <- ggplot(data=ict_derived, 
             aes(x= `RADIO_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

tv <- ggplot(data=ict_derived, 
             aes(x= `TV_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

llphone <- ggplot(data=ict_derived, 
             aes(x= `LLPHONE_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

mphone <- ggplot(data=ict_derived, 
             aes(x= `MPHONE_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

computer <- ggplot(data=ict_derived, 
             aes(x= `COMPUTER_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

internet <- ggplot(data=ict_derived, 
             aes(x= `INTERNET_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

ggarrange(radio, tv, llphone, mphone, computer, internet, 
          ncol = 3, 
          nrow = 2)
```

## Exploratory Data Analysis using choropleth map

### Joining geospatial data with aspatial data

Before plotting a cholorpleth map, we need to first join the geospatial data object i.e., *shan_sf* and aspatial data.frame object i.e., *ict_derived* together. This will be performed using *left_join()* function from the **dplyr** package. *shan_sf* simple feature data.frame will the base data object and *ict_derived* data.frame will be the join table.

The code chunk below joins (left outer join) the two data objects together using the common attribute *TS_PCODE*.

```{r}
shan_sf <- left_join(shan_sf, 
                     ict_derived, by=c("TS_PCODE"="TS_PCODE"))
  
write_rds(shan_sf, "/Users/ridz/ridhicar/ISSS624/Hands-On_Ex/Hands-on_Ex3/sandbox/shan_sf.rds")
```

Note: There is no new output data being created. Instead, the data fields of *ict_derived* data frame are now part of the data frame *shan_sf*.

### Preparing a choropleth map

The code chunk below uses *qtm()* function of the **tmap** package to create choropleth map that shows the distribution of Radio penetration rate of Shan State at township level.

```{r}
qtm(shan_sf, "RADIO_PR")
```

We will now create two choropleth maps, one for the total number of households i.e., TT_HOUSEHOLDS.map and one for the total number of households with Radio i.e., RADIO.map. This is to reveal that the distribution shown above are bias to the underlying total number of households at the townships.

```{r}
TT_HOUSEHOLDS.map <- tm_shape(shan_sf) + 
  tm_fill(col = "TT_HOUSEHOLDS",
          n = 5,
          style = "jenks", 
          title = "Total households") + 
  tm_borders(alpha = 0.5) 

RADIO.map <- tm_shape(shan_sf) + 
  tm_fill(col = "RADIO",
          n = 5,
          style = "jenks",
          title = "Number Radio ") + 
  tm_borders(alpha = 0.5) 

tmap_arrange(TT_HOUSEHOLDS.map, RADIO.map,
             asp=NA, ncol=2)
```

The choropleth maps above clearly show that the townships with relatively larger number of households are also showing relatively higher number of radio ownerships. Hence, demonstrating that using the numbers directly will be bias by the underlying total number of households. This supports our action to normalize the data i.e., to use the Radio penetration rate - number of Radio ownership/number of households per area instead to compare.

The code chunk below plots the 2 choropleth maps, the distribution total number of households and Radio penetration rate.

```{r}
tm_shape(shan_sf) +
    tm_polygons(c("TT_HOUSEHOLDS", "RADIO_PR"),
                style="jenks") +
    tm_facets(sync = TRUE, ncol = 2) +
  tm_legend(legend.position = c("right", "bottom"))+
  tm_layout(outer.margins=0, asp=0)
```

The choropleth maps above clearly show it is not necessary that the townships with relatively larger number of households will also show relatively higher number of radio ownerships. Normalizing the data means there will be no bias.

???

## Correlation Analysis

In order to perform cluster analysis, we need to perform preliminary step to ensure the cluster variables are not highly correlated.

In this section, we will use *corrplot.mixed()* function of corrplot package to visualize and analyze the correlation of each input variable.

```{r}
cluster_vars.cor = cor(ict_derived[,12:17])
corrplot.mixed(cluster_vars.cor,
         lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black")
```

From the results above, we can see that there is a high correlation of 0.87 between COMPUTER_PR and INTERNET_PR.This suggests, we can use one of them instead of both when performing the cluster analysis.

## Hierarchy Cluster Analysis

In this section, we will perform the hierarchical cluster analysis. Hierarchical clustering is a method grouping objects where objects within a group are similar to each other and different from objects in other groups.

The analysis consists of 4 major steps:

1.  Compute the proximity matrix using a particular distance metric

2.  Each data point is assigned to a cluster

3.  Merge the clusters based on a metric for the similarity between clusters

4.  Update the distance matrix

5.  Repeat Step 3 and Step 4 until only a single cluster remains

### Extracting the clustering variables

The code chunk below will be used to extract the clustering variables from the *shan_sf* simple feature object into data.frame. Note that the list does not include the variable INTERNET_PR because of it is highly correlated with variable COMPUTER_PR.

```{r}
cluster_vars <- shan_sf %>%
  st_set_geometry(NULL) %>%
  select("TS.x", "RADIO_PR", "TV_PR", "LLPHONE_PR", "MPHONE_PR", "COMPUTER_PR")
head(cluster_vars,10)
```

The code chunk below changes the index of data.frame to the township name instead of the default row numbers. We will use the *head()* function to pull the first 10 rows to check if the row number has been replaced into the township name successfully. We can then delete the TS.x field.

```{r}
row.names(cluster_vars) <- cluster_vars$"TS.x"
head(cluster_vars,10)
```

The code chunk below deletes the redundant TS.x field and then, pulls the first 10 rows using the *head()* function. This is to check if the change was successfully implemented.

```{r}
shan_ict <- select(cluster_vars, c(2:6))
head(shan_ict, 10)
```

### Data Standardization

In general, when multiple cluster variables are used, it is not unusual for their values ranges to be different. In order to avoid a bias cluster analysis result due to largely dispersed clustering variables, it is useful to normalize the input variables before performing the analysis.

#### Min-Max standardization

The code chunk below uses *normalize()* of **heatmaply** package to standardize the clustering variables using the Min-Max method. The *summary()* function is then used to display the summary statistics of the standardized clustering variables. Using the min-max method, we have standardized all variables values between 0-1.

```{r}
shan_ict.std <- normalize(shan_ict)
summary(shan_ict.std)
```

#### Z-score standardization

Alternatively, [assuming all variables come from some normal distribution]{.underline}, we can use the *scale()* function of Base R, part of the Z-score standardization method, to standardize the cluster variable values to between 0 and 1. We will use *describe()* of **psych** package instead of *summary()* of Base R because the earlier provides standard deviation.

```{r}
shan_ict.z <- scale(shan_ict)
describe(shan_ict.z)
```

#### Visualizing the standardized clustering variables

The code chunk below plots the scaled *RADIO_PR* field.

```{r}
r <- ggplot(data=ict_derived, 
             aes(x= `RADIO_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  ggtitle("Raw values without standardisation")

shan_ict_s_df <- as.data.frame(shan_ict.std)
s <- ggplot(data=shan_ict_s_df, 
       aes(x=`RADIO_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  ggtitle("Min-Max Standardisation")

shan_ict_z_df <- as.data.frame(shan_ict.z)
z <- ggplot(data=shan_ict_z_df, 
       aes(x=`RADIO_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  ggtitle("Z-score Standardisation")

ggarrange(r, s, z,
          ncol = 3,
          nrow = 1)
```

???

```{r}
r <- ggplot(data=ict_derived, 
             aes(x= `RADIO_PR`)) +
  geom_density(color="black",
               fill="light blue") +
  ggtitle("Raw values without standardisation")

shan_ict_s_df <- as.data.frame(shan_ict.std)
s <- ggplot(data=shan_ict_s_df, 
       aes(x=`RADIO_PR`)) +
  geom_density(color="black",
               fill="light blue") +
  ggtitle("Min-Max Standardisation")

shan_ict_z_df <- as.data.frame(shan_ict.z)
z <- ggplot(data=shan_ict_z_df, 
       aes(x=`RADIO_PR`)) +
  geom_density(color="black",
               fill="light blue") +
  ggtitle("Z-score Standardisation")

ggarrange(r, s, z,
          ncol = 3,
          nrow = 1)
```

### Computing Proximity matrix

In this section, we will use *dist()*, one of many R packages, to compute the proximity matrix. This is calculated by applying a distance function between each pair of objects.

*dist()* supports 6 distance proximity calculations, they are **euclidean** (default), **maximum**, **manhattan**, **canberra**, **binary** and **minkowski**.

The code chunk below computes the proximity matrix using the *Euclidean* method.

```{r}
# same as proxmat <- dist(shan_ict)
proxmat <- dist(shan_ict, method = 'euclidean')
proxmat
```

### Computing hierarchical clustering

In this section, we will use *hclust()*, one of many R packages, to provide the hierarchical clustering function.

*hclust()* employs an agglomeration method to compute the cluster. In agglomerative hierarchical clustering, we initially consider each object to be a cluster on its own. Then, according to a particular procedure, the clusters are merged step by step until a single cluster remains. At the end of the cluster merging process, a cluster containing all the elements will be formed.

The 8 clustering algorithms are supported, they are: ward.D, ward.D2, single, complete, average(UPGMA), mcquitty(WPGMA), median(WPGMC) and centroid(UPGMC).

The code chunk below performs agglomerative hierarchical cluster analysis using ward.D method. The hierarchical clustering output is stored in an object of class **hclust** which describes the tree produced by the clustering process.

The Ward approach analyzes the variance of the clusters rather than measuring distances directly, minimizing the variance between clusters. The distance between two clusters is related to how much the sum of squares (SS) value will increase when combined.

In other words, the Ward method attempts to minimize the sum of the squared distances of the points from the cluster centers. Compared to the distance-based measures, the Ward method is less susceptible to noise and outliers. Therefore, Ward's method is preferred more than others in clustering.

```{r}
hclust_ward <- hclust(proxmat, method = 'ward.D')
```

The code chunk below plots the tree, known as *dendrogram*, by using *plot()* of R Graphics.

```{r}
plot(hclust_ward, cex = 0.6)
```

### Selecting the optimal clustering algorithm

In this section, we will use *agnes()* function of **cluster** package to identify the stronger clustering structures. Unlike *hclus()*, the *agnes()* function also us the agglomerative co-efficient. This measures the amount of clustering structure found, values closer to 1 suggests strong clustering structure.

The code chunk below will be used to compute the agglomerative coefficients of all hierarchical clustering algorithms.

```{r}
m <- c( "average", "single", "complete", "ward")
names(m) <- c( "average", "single", "complete", "ward")

ac <- function(x) {
  agnes(shan_ict, method = x)$ac
}

map_dbl(m, ac)
```

The result above shows that the Ward's method provides the strongest clustering structures among the 4 methods assessed. Hence, in the subsequent analysis, only the the Ward's method will be used.

## Determining Optimal Clusters

In this section, we will determine the optimal clusters to retain.

There are 3 commonly used methods to determine the optimal clusters, they are:

-   Elbow Method

-   Average Silhouette Method

-   Gap Statistic Method.

### Gap Statistic Method

The gap statistic compares the total within intra-cluster variation for different values of k with their expected values under null reference distribution of the data. The estimate of the optimal clusters will be value that maximize the gap statistic (i.e., that yields the largest gap statistic). This means that the clustering structure is far away from the random uniform distribution of points.

The code chunk below uses *clusGap()* of cluster package to compute the gap statistic. Note that we use the *hcut()* function from **factoextra** pacakage.

```{r}
set.seed(12345)
gap_stat <- clusGap(shan_ict, 
                    FUN = hcut, 
                    nstart = 25, 
                    K.max = 10, 
                    B = 50)
# Print the result
print(gap_stat, method = "firstmax")
```

The code chunk below visualizes the plot by using *fviz_gap_stat()* of **factoextra** package.

```{r}
fviz_gap_stat(gap_stat)
```

The results above shows that as per the gap statistic graph, the recommended number of clusters to retain is 1. However, it is not logical to retain only one cluster. By examining the gap statistic graph, we can see that the next best number of clusters to pick is 6.

**Note:** In addition to these commonly used approaches, the [NbClust](https://cran.r-project.org/web/packages/NbClust/) package, published by Charrad et al., 2014, provides 30 indices for determining the relevant number of clusters and proposes to users the best clustering scheme from the different results obtained by varying all combinations of number of clusters, distance measures, and clustering methods.

```{r}
library(NbClust)
NbClust(data = shan_ict, min.nc = 2, method = "ward.D")
```

### Interpreting the dendograms

In the dendrogram displayed above, each leaf corresponds to one observation. As we move up the tree, the observations that are similar to one another are combined into branches, which are in turn, fused at a higher height.

The height of the fusion, provided on the vertical axis, indicates the (dis)similarity between two observations. The higher the height of the fusion, the lesser the similarity between the observations. Note that, conclusions about the proximity of two observations can be drawn only based on the height where branches containing those two observations first are fused. We cannot use the proximity of two observations along the horizontal axis as a criteria of their similarity.

The code chunk below the dendogram with a border around the selected clusters by using *rect.hclust()* of R stats. The argument border is used to specify the border colours for the rectangles.

```{r}
plot(hclust_ward, cex = 0.6)
rect.hclust(hclust_ward, 
            k = 6, 
            border = 2:5)
```

### Visually-driven hierarchical clustering analysis

In this section, we will perform visually-driven hierarchical clustering using the **heatmaply** package.

With **heatmaply**, we can either build a static cluster heatmap or a highly interactyive cluster heatmap.

#### Transforming the data frame into a matrix

We need to transform the data.frame into a data matrix to make a heatmap. The code chunk below performs this transformation.

```{r}
shan_ict_mat <- data.matrix(shan_ict)
```

Plotting interactive cluster heatmap using *heatmaply()*

The code chunk below plots the normalized, now transformed data matrix, i.e., shan_ict_mat, into an interactive cluster heatmap.

```{r}
library(heatmaply)
heatmaply(normalize(shan_ict_mat),
          Colv=NA,
          dist_method = "euclidean",
          hclust_method = "ward.D",
          seriate = "OLO",
          colors = Blues,
          k_row = 6,
          margins = c(NA,200,60,NA),
          fontsize_row = 4,
          fontsize_col = 5,
          main="Geographic Segmentation of Shan State by ICT indicators",
          xlab = "ICT Indicators",
          ylab = "Townships of Shan State"
          )
```

### Mapping the clusters formed

The code chunk below uses *cutree()* of R base to derive the 6 cluster model. The output is called *groups*, it is a *list* object.

```{r}
groups <- as.factor(cutree(hclust_ward, k=6))
```

The code chunk below performs 3 steps:

1.  the groups list object is converted into a matrix i.e., *as.matrix(groups)*;

2.  *cbind()* is used to append the groups matrix onto shan_sf to produce an output simple feature object called `shan_sf_cluster`.

3.  *rename()* of **dplyr** package is used to rename as.matrix.groups field to CLUSTER.

```{r}
shan_sf_cluster <- cbind(shan_sf, as.matrix(groups)) %>%
  rename(`CLUSTER`=`as.matrix.groups.`)
```

Then, the code chunk below uses *qtm()* of **tmap** package to plot the choropleth map showing the cluster formed.

```{r}
library(tmap)
qtm(shan_sf_cluster, "CLUSTER")
```

The choropleth map above reveals the 6 clusters are very fragmented.

The is one of the major limitation when non-spatial clustering algorithm such as hierarchical cluster analysis method is used.

## Spatially Constrained Clustering: SKATER approach

In this section, we will derive the spatially constrained cluster by using *skater()* method of **spdep** package.

### Converting into SpatialPolygonsDataFrame

The skater() function only supports sp objects such as SpatialPolygonDataFrame. This therefore requires us to first convert shan_sf into a SpatialPolygonsDataFrame.

The code chunk below performs uses *as_Spatial()* of **sf** package to convert *shan_sf* into a SpatialPolygonsDataFrame called *shan_sp*.

```{r}
library(sf)
shan_sp <- as_Spatial(shan_sf)
```

### Computing Neighbour List

Next, the code chunk below uses *poly2nd()* functionof **spdep** package to compute the neighbours list from polygon list.

```{r}
library(spdep)
library(sp)
library(spData)

#install.packages("spDataLarge")
#library("spDataLarge")

shan.nb <- poly2nb(shan_sp)
summary(shan.nb)
```

We can plot the neighbours list on shan_sp by using the code chunk below. Since we now can plot the community area boundaries as well, we plot this graph on top of the map. The first plot command gives the boundaries. This is followed by the plot of the neighbor list object, with coordinates applied to the original SpatialPolygonDataFrame (Shan state township boundaries) to extract the centroids of the polygons. These are used as the nodes for the graph representation. We also set the color to blue and specify add=TRUE to plot the network on top of the boundaries.

```{r}
plot(shan_sp, 
     border=grey(.5))
plot(shan.nb, 
     coordinates(shan_sp), 
     col="blue", 
     add=TRUE)
```

Note that if you plot the network first and then the boundaries, some of the areas will be clipped. This is because the plotting area is determined by the characteristics of the first plot. In this example, because the boundary map extends further than the graph, we plot it first.

```{r}
plot(shan.nb, 
     coordinates(shan_sp), 
     col="blue")

plot(shan_sp, 
     border=grey(.5),
     add=TRUE)
```

### Computing minimum spanning tree

#### Calculating edge costs

Next, the code chunk below uses *nbcosts()* of **spdep** package to compute the cost of each edge. It is the distance between its nodes. This function computes the distance using a data.frame with observations vector in each node.

```{r}
lcosts <- nbcosts(shan.nb, shan_ict)
```

For each observation, this gives the pairwise dissimilarity between its values on the five variables and the values for the neighbouring observation (from the neighbour list). Basically, this is the notion of a generalized weight for a spatial weights matrix.

Next, we will incorporate these costs into a weights object in the same way as we did in the calculation of inverse of distance weights. In other words, we will convert the neighbour list to a list weights object by specifying the just computed `lcosts` as the weights.

The code chunk below uses *nb2listw()* function of **spdep** package to achieve this.

Note that we specify the *style* as **B** to make sure the cost values are not row-standardized.

```{r}
shan.w <- nb2listw(shan.nb, 
                   lcosts, 
                   style="B")
summary(shan.w)
```

### Computing minimum spanning tree

The code chunk computes the minimum spanning tree using *mstree()* function of **spdep** package.

```{r}
shan.mst <- mstree(shan.w)
# To check the class of MST
class(shan.mst)
# To check the dimension of MST
dim(shan.mst)
# To pull the first 10 rows of MST
head(shan.mst, n=10)
```

Note that the dimension is 54 and not 55. This is because the minimum spanning tree consists on n-1 edges (links) in order to traverse all the nodes.

The code chunk below uses the plot method for the MST to show the observation numbers of the nodes in addition to the edge. As before, we will plot this together with the township boundaries. The initial neighbour list is simplied to just one edge connecting each of the nodes, while passing through all the nodes.

```{r}
plot(shan_sp, border=gray(.5))
plot.mst(shan.mst, 
         coordinates(shan_sp), 
         col="blue", 
         cex.lab=0.7, 
         cex.circles=0.005, 
         add=TRUE)
```

### Computing spatially constrained clusters using SKATER method

The code chunk below computes the spatially constrained cluster using the *skater()* function of **spdep** package.

```{r}
# The skater() takes 3 mandatory arguments:
# 1. shan.mst[,1:2] <- the first two columns of the MST matrix which are not the cost,
# 2. shan_ict <- the data matrix, to update the costs as units are being grouped
# 3. ncuts = 5 <- this is set to one less than the number of clusters.

clust6 <- spdep::skater(edges = shan.mst[,1:2], 
                 data = shan_ict, 
                 method = "euclidean", 
                 ncuts = 5)
```

The *skater()* takes three mandatory arguments: - the first two columns of the MST matrix (i.e. not the cost), - the data matrix (to update the costs as units are being grouped), and - the number of cuts. Note: It is set to **one less than the number of clusters**. So, the value specified is **not** the number of clusters, but the number of cuts in the graph, one less than the number of clusters.

The result of the *skater()* is an object of class **skater**.

The code chunk below is used to examine the contents of the spatially constrained cluster.

```{r}
str(clust6)
```

The most interesting component of this list structure is the groups vector containing the labels of the cluster to which each observation belongs (as before, the label itself is arbitary). This is followed by a detailed summary for each of the clusters in the edges.groups list. Sum of squares measures are given as ssto for the total and ssw to show the effect of each of the cuts on the overall criterion.

The code chunk below is used to check the cluster assignment.

```{r}
ccs6 <- clust6$groups
ccs6
```

The code chunk below uses the *table()* function to find out how many observations are in each cluster. Parenthetially, we can also find this as the dimension of each vector in the lists contained in edges.groups. For example, the first list has node with dimension 12, which is also the number of observations in the first cluster.

```{r}
table(ccs6)
```

Lastly, the code chunk below can be used to plot the pruned tree that shows 5 clusters on top of the township area.

```{r}
plot(shan_sp, border=gray(.5))
plot(clust6, 
     coordinates(shan_sp), 
     cex.lab=.7,
     groups.colors=c("red","green","blue", "brown", "pink"),
     cex.circles=0.005, 
     add=TRUE)
```

### Visualizing the clusters in choropleth map

The code chunk below is used to plot the newly derived clusters by using SKATER method.

```{r}
groups_mat <- as.matrix(clust6$groups)
shan_sf_spatialcluster <- cbind(shan_sf_cluster, as.factor(groups_mat)) %>%
  rename(`SP_CLUSTER`=`as.factor.groups_mat.`)
qtm(shan_sf_spatialcluster, "SP_CLUSTER")
```

The code chunk below is used to plot both the hierarchical clustering and the spatially constrained hierarchical clustering maps next to each other for easier comparison.

```{r}
hclust.map <- qtm(shan_sf_cluster,
                  "CLUSTER") + 
  tm_borders(alpha = 0.5) 

shclust.map <- qtm(shan_sf_spatialcluster,
                   "SP_CLUSTER") + 
  tm_borders(alpha = 0.5) 

tmap_arrange(hclust.map, shclust.map,
             asp=NA, ncol=2)
```

## Spatially Constrained Clustering: ClustGeo Method

In this section, we will use functions of **ClustGeo** library to perform non-spatially constrained hierarchical cluster analysis and spatially constrained cluster analysis.

### A short note about ClustGeo package

ClustGeo package is an R package specially designed to support the need of performing spatially constrained cluster analysis. More specifically, it provides a Ward-like hierarchical clustering algorithm called `hclustgeo()` including spatial/geographical constraints.

In the nutshell, the algorithm uses two dissimilarity matrices D0 and D1 along with a mixing parameter alpha, whereby the value of alpha must be a real number between \[0, 1\]. D0 can be non-Euclidean and the weights of the observations can be non-uniform. It gives the dissimilarities in the **attribute/clustering variable space**. D1, on the other hand, gives the dissimilarities in the **constraint space**. The criterion minimised at each stage is a convex combination of the homogeneity criterion calculated with D0 and the homogeneity criterion calculated with D1.

The idea is then to determine a value of alpha which increases the spatial contiguity without deteriorating too much the quality of the solution based on the variables of interest. This need is supported by a function called `choicealpha()`.

### Ward-like hierarchical clustering: ClustGeo

We can use *hclustgeo()* function from **ClustGeo** package, just like *hclust()* in previous section, to perform a typical Ward-like hierarchical clustering.

The code chunk below can be used to perform non-spatially constrained clustering.

```{r}
nongeo_cluster <- hclustgeo(proxmat)
plot(nongeo_cluster, cex = 0.5)
rect.hclust(nongeo_cluster, 
            k = 6, 
            border = 2:5)
```

Note that the dissimilarity matrix must be an object of class dist, i.e. an object obtained with the function *dist()*. For sample code chunk, please refer to Computing proximity matrix.

### Mapping the clusters formed

The code chunk below plots the 6 nclusters on a categorical area shaded map by using *cutree()* of R base. The output is called *groups*, it is a *list* object.

The code chunk below performs 3 steps:

1.  the groups list object is converted into a factor i.e., *as.factor(groups)*;

2.  *cbind()* is used to append the groups matrix onto shan_sf to produce an output simple feature object called `shan_sf_ngeo_cluster`.

3.  *rename()* of **dplyr** package is used to rename as.matrix.groups field to CLUSTER.

```{r}
groups <- as.factor(cutree(nongeo_cluster, k=6))
shan_sf_ngeo_cluster <- cbind(shan_sf, as.matrix(groups)) %>%
  rename(`CLUSTER` = `as.matrix.groups.`)
```

Then, the code chunk below uses *qtm()* of **tmap** package to plot the choropleth map showing the cluster formed.

```{r}
qtm(shan_sf_ngeo_cluster, "CLUSTER")
```

### Spatially Constrained Hierarchical Clustering

Before we can perform spatially constrained hierarchical clustering, a spatial distance matrix needs to be derived. This is done by using *st_distance()* function of **sf** package. *as_dist()* is used to convert the data frame into matrix.

```{r}
dist <- st_distance(shan_sf, shan_sf)
distmat <- as.dist(dist)
```

Next, the code chunk below uses *choicealpha()* function to determine a suitable value for the mixing parameter alpha.

```{r}
cr <- choicealpha(proxmat, distmat, range.alpha = seq(0, 1, 0.1), K=6, graph = TRUE)
```

With reference to the graphs above, alpha = 0.3 will be used as shown in the code chunk below.

```{r}
clustG <- hclustgeo(proxmat, distmat, alpha = 0.3)
```

Next, we can use *cutree()* to derive the cluster object.

```{r}
groups <- as.factor(cutree(clustG, k=6))
```

We will then join back the group list with *shan_sf* polygon feature data frame by using the code chunk below.

```{r}
shan_sf_Gcluster <- cbind(shan_sf, as.matrix(groups)) %>%
  rename(`CLUSTER` = `as.matrix.groups.`)
```

We can now plot the map of the newly delineated spatially constrained clusters.

```{r}
qtm(shan_sf_Gcluster, "CLUSTER")
```

## Visual Interpretation of Clusters

### Visualizing individual clustering variable

The code chunk below is used to reveal the distribution of the clustering variable, i.e., RADIO_PR by cluster.

```{r}
ggplot(data = shan_sf_ngeo_cluster,
       aes(x = CLUSTER, y = RADIO_PR)) +
  geom_boxplot()
```

The boxplot above reveals that the Cluster 3 displays the highest mean Radio Ownership Per Thousand Household. This is followed by Cluster 2, 1, 4, 6, and 5.

### Multivariate Visualization

Past studies shown that parallel coordinate plot can be used to reveal clustering variables by cluster very effectively. In the code chunk below, *ggparcoord()* function of GGally package.

```{r}
# install.packages("GGally")
library(GGally)
ggparcoord(data = shan_sf_ngeo_cluster, 
           columns = c(17:21), 
           scale = "globalminmax",
           alphaLines = 0.2,
           boxplot = TRUE, 
           title = "Multiple Parallel Coordinates Plots of ICT Variables by Cluster") +
  facet_grid(~ CLUSTER) + 
  theme(axis.text.x = element_text(angle = 30))
```

The parallel coordinate plot above reveals that households in Cluster 4 townships tend to own the highest number of TV and mobile-phone. On the other hand, households in Cluster 5 tends to own the lowest of all the five ICT.

Note that the scale argument of *ggparcoor()* function provide several methods to scale the clustering variables. They are:

-   std: univariately, subtract mean and divide by standard deviation.

-   robust: univariately, subtract median and divide by median absolute deviation.

-   uniminmax: univariately, scale so the minimum of the variable is zero, and the maximum is one.

-   globalminmax: no scaling is done; the range of the graphs is defined by the global minimum and the global maximum.

-   center: use uniminmax to standardize vertical height, then center each variable at a value specified by the scaleSummary param.

-   centerObs: use uniminmax to standardize vertical height, then center each variable at the value of the observation specified by the centerObsID param

There is no one best scaling method to use. You should explore them and select the one that best meet your analysis need.

Last but not least, we can also compute the summary statistics such as mean, median, sd, etc to complement the visual interpretation.

In the code chunk below, *group_by()* and *summarise()* of dplyr are used to derive mean values of the clustering variables.

```{r}
library(dplyr)
library(sf)

shan_sf_ngeo_cluster %>% 
  st_set_geometry(NULL) %>%
  group_by(CLUSTER) %>%
  summarise(mean_RADIO_PR = mean(RADIO_PR),
            mean_TV_PR = mean(TV_PR),
            mean_LLPHONE_PR = mean(LLPHONE_PR),
            mean_MPHONE_PR = mean(MPHONE_PR),
            mean_COMPUTER_PR = mean(COMPUTER_PR))
```
