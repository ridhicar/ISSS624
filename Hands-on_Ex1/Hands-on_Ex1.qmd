---
title: "Hands-on Exercise 1: Geospatial Data Wrangling with R"
editor: visual
---

# Geospatial Data Wrangling with R

## Overview: 

In this hands-on exercise, I learn how to import and wrangling geospatial data using appropriate R packages.

## Getting Started

The code chunk below install and load [sf](https://r-spatial.github.io/sf/), [tidyverse](https://tidyverse.tidyverse.org/) and [tmap](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-getstarted.html) (for Chloropeth Mapping with R) packages into R environment.

Firstly, ensure you have downloaded the pacman library, else run install.packages("pacman") on your console before proceeding with the below code.

```{r}
pacman::p_load(sf, tidyverse, tmap)

```

## Importing Geospatial Data

### Importing polygon feature data

```{r}
mpsz <- st_read(dsn = "data/geospatial", 
                  layer = "MP14_SUBZONE_WEB_PL")
mpsz
```

### Importing polyline feature data

```{r}
cyclingpath = st_read(dsn = "data/geospatial",
                      layer = "CyclingPath")
```

### Importing GIS data in kml format

```{r}
preschool = st_read("data/geospatial/pre-schools-location-kml.kml")
```

## Importing Attribute Data into R (Chloropleth Mapping with R)

```{r}
popdata <- read_csv("data/aspatial/respopagesextod2011to2020.csv")
popdata
```

## Checking the Content of A Simple Feature Data Frame

### Working with st_geometry()

```{r}
st_geometry(mpsz)
```

### Working with glimpse()

```{r}
glimpse(mpsz)
```

### Working with head()

```{r}
head(mpsz, n=5)
```

## Plotting the Geospatial Data

```{r}
plot(mpsz)
```

Using max.plot = 15 to plot all attributes;

```{r}
# To visualise the geospatial features
plot(mpsz, max.plot = 15)
```

```{r}
# To plot only the geometry
plot(st_geometry(mpsz))
```

```{r}
# To plot the sf object by using specific attribute
plot(mpsz["PLN_AREA_N"])
```

## Working with Projection

### Assigning EPSG code to a simple feature data frame

```{r}
# To check the CSR
st_crs(mpsz)
```

```{r}
# To assign the correct EPSG code to mpsz data frame
mpsz3414 <- st_set_crs(mpsz, 3414)
```

```{r}
# To check the CSR again
st_crs(mpsz3414)
```

### Transforming the projection of the preschool from wg84 to svy21.

```{r}
# To reproject preschool from one coordinate system i.e., wg84 to another i.e., svy21.
preschool3414 <- st_transform(preschool,
                              crs = 3414)
```

```{r}
# To check the CRS
st_crs(preschool3414)
```

## Importing and Converting An Aspatial Data

## Importing the aspatial data

```{r}
# To import listings.csv - tibble data frame.
listings <- read_csv("data/aspatial/listings.csv")
```

```{r}
# To examine if the data file has been imported correctly.
list(listings)
```

### Creating a simple feature data frame from an aspatial data frame

```{r}
listings_sf <- st_as_sf(listings,
                        coords = c("longitude",
                                   "latitude"),
                        crs=4326) %>%
  st_transform(crs = 3414)
```

```{r}
glimpse(listings_sf)
```

## Geoprocessing with sf package

### Buffering

```{r}
# To compute 5 meter buffers around cycling paths
buffer_cycling <- st_buffer(cyclingpath,
                            dist=5, nQuadSegs = 30)
```

```{r}
# To calculate the area of the buffers
buffer_cycling$AREA <- st_area(buffer_cycling)
```

```{r}
# To derive the total land involved using sum() of Base R
sum(buffer_cycling$AREA)
```

### Point-in-polygon count

```{r}
# To get the number of pre-schools in each planning sub-zone.
# ** DO NOT CONFUSE WITH st_intersection()
mpsz3414$'PreSch Count' <- lengths(st_intersects(mpsz3414, preschool3414))
```

```{r}
# To get the summary stats of the newly derived column 'PreSch Count' that pulls the number of pre-schools in each planning sub-zone.
summary(mpsz3414$'PreSch Count')
```

```{r}
# To pull the top planning sub-zone with the most number of pre-schools in its area, we can pull this using top_n() from dplyr package.
top_n(mpsz3414, 1, 'PreSch Count')
```

```{r}
# To calculate the area of each planning zone
mpsz3414$Area <- mpsz3414 %>%
  st_area()
```

```{r}
mpsz3414$'PreSch Count'
```

```{r}
# To compute the density i.e., how much of the land is covered by preschools?
# mpsz3414$'PreSch Density' <- mpsz3414$'PreSch Count'/mpsz3414$Area * 1000000
# Call dplyr for mutate(), otherwise throws an error.
library(dplyr)
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

## Exploratory Data Analysis (EDA)

```{r}
# To plot histogram to understand the distribution of preschool density.

hist(mpsz3414$'PreSch Density')
```

```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```

```{r}
# Using ggplot2 method, plot a scatterplot showing the relationship # between Pre-school Density and Pre-school Count.

ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`),
           y= `PreSch Count`))+
  geom_point() +
  xlim(0, 40) +
  ylim(0,40) +
  # Modify axis labels
  xlab("Pre-school density (per km sq)") +
  ylab("Pre-school count")
```

# Chloropleth Mapping with R

## Data Preparation

### Data Wrangling

```{r}
popdata
```

```{r}
library(dplyr)
popdata2020 <- popdata %>%
  filter(Time == 2020) %>%
  group_by(PA, SZ, AG) %>%
  summarise(`POP` = sum(`Pop`)) %>%
  ungroup()%>%
  pivot_wider(names_from=AG, 
              values_from=POP) %>%
  mutate(YOUNG = rowSums(.[3:6])
         +rowSums(.[12])) %>%
mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+
rowSums(.[13:15]))%>%
mutate(`AGED`=rowSums(.[16:21])) %>%
mutate(`TOTAL`=rowSums(.[3:21])) %>%  
mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)
/`ECONOMY ACTIVE`) %>%
  select(`PA`, `SZ`, `YOUNG`, 
       `ECONOMY ACTIVE`, `AGED`, 
       `TOTAL`, `DEPENDENCY`)
```

### Joining the attribute data and geospatial data

```{r}
# standardise PA and SZ to uppercase to match SUBZONE_N and PLN_AREA_N before geo-relational join
popdata2020 <- popdata2020 %>%
  mutate_at(.vars = vars(PA, SZ), 
          .funs = funs(toupper)) %>%
  filter(`ECONOMY ACTIVE` > 0)
```

```{r}
# Geo-relational join
 mpsz_pop2020 <- left_join(mpsz, popdata2020,
                          by = c("SUBZONE_N" = "SZ"))
```

```{r}
write_rds(mpsz_pop2020, "data/rds/mpszpop2020.rds")
```

## Choropleth Mapping Geospatial Data Using *tmap*

### Plotting a choropleth map quickly by using *qtm()*

```{r}
tmap_mode("plot")
qtm(mpsz_pop2020, 
    fill = "DEPENDENCY")
```

## Creating a choropleth map by using *tmap*\'s elements

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "Dependency ratio") +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.40, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 1) +
  tm_scale_bar() +
  tm_grid(alpha =0.5) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

### Drawing a base map

```{r}
# tm_shape() is used to define the input data (i.e mpsz_pop2020) and tm_polygons() is used to draw the planning subzone polygons
tm_shape(mpsz_pop2020) +
  tm_polygons()
```

### Drawing a choropleth map using *tm_polygons()*

```{r}
tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY")
```

### Drawing a choropleth map using *tm_fill()* and \*tm_border()\*\*

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY")
```

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY") +
  tm_borders(lwd = 0.1,  alpha = 1)
```

## Data classification methods of **tmap**

### Plotting choropleth maps with built-in classification methods

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "jenks") +
  tm_borders(alpha = 0.5)
```

```{r}
# Equal data classification method
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5)
```

### Plotting choropleth map with custom break

```{r}
# To get summary stats of dependency
summary(mpsz_pop2020$DEPENDENCY)
```

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +
  tm_borders(alpha = 0.5)
```

## Colour Scheme

### Using ColourBrewer palette

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 6,
          style = "quantile",
          palette = "Blues") +
  tm_borders(alpha = 0.5)
```

```{r}
# Colour shading in Green
# Reverse shading denoted by "-".
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "-Greens") +
  tm_borders(alpha = 0.5)
```

## Map Layouts

### Map Legend

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "jenks", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone \n(Jenks classification)",
            main.title.position = "center",
            main.title.size = 1,
            legend.height = 0.45, 
            legend.width = 0.35,
            legend.outside = FALSE,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```

### Map style

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "-Greens") +
  tm_borders(alpha = 0.5) +
  tmap_style("classic")
```

### Cartographic Furniture

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "No. of persons") +
  tm_layout(main.title = "Distribution of Dependency Ratio \nby planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar(width = 0.15) +
  tm_grid(lwd = 0.1, alpha = 0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

```{r}
tmap_style("white")
```

## Drawing Small Multiple Choropleth Maps

### By assigning multiple values to at least one of the aesthetic arguments

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill(c("YOUNG", "AGED"),
          style = "equal", 
          palette = "Blues") +
  tm_layout(legend.position = c("right", "bottom")) +
  tm_borders(alpha = 0.5) +
  tmap_style("white")
```

```{r}
tm_shape(mpsz_pop2020)+ 
  tm_polygons(c("DEPENDENCY","AGED"),
          style = c("equal", "quantile"), 
          palette = list("Blues","Greens")) +
  tm_layout(legend.position = c("right", "bottom"))
```

### By defining a group-by variable in *tm_facets()*

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "Blues",
          thres.poly = 0) + 
  tm_facets(by="REGION_N", 
            free.coords=TRUE, 
            drop.shapes=TRUE) +
  tm_layout(legend.show = FALSE,
            title.position = c("center", "center"), 
            title.size = 20) +
  tm_borders(alpha = 0.5)
```

### By creating multiple stand-alone maps with *tmap_arrange()*

```{r}
youngmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("YOUNG", 
              style = "quantile", 
              palette = "Blues")

agedmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("AGED", 
              style = "quantile", 
              palette = "Blues")

tmap_arrange(youngmap, agedmap, asp=1, ncol=2)
```

## Mappping Spatial Object Meeting a Selection Criterion

```{r}
tm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N=="CENTRAL REGION", ])+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(legend.outside = TRUE,
            legend.height = 0.45, 
            legend.width = 5.0,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```
