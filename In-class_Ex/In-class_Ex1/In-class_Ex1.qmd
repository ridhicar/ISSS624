---
title: "In-class Exercise 1: Spatial Weights and Applications"
editor: visual
---

## 1. Overview

This document covers the in-class exercise 1. In this exercise, we will learn how to compute spatial weights using R.

## 2. Getting Started

The code check below will install and load the relevant packages. **pacman** is a wrapper in R that helps us load and install packages.

-   Functions of **tidyverse** can be used to perform data science tasks such as importing, wrangling, and visualizing data.

-   Function of **readr** package (part of tidyverse) can be used to import csv files.

-   ***st_read(dsn = "file path", layer = "file name")*** of **sf** package can be used to import geospatial data.

-   Join function i.e., ***left_join(dataframe1, dataframe2)*** of **dplyr** can be used to perform relational join.

-   ***poly2nb()*** of **spdep** can be used to compute spatial weights and to calculate spatially lagged variables.

```{r}
# same as:
# library(pacman)
# p_load(tidyverse, sf ,..)
pacman::p_load(tidyverse, sf, tmap, spdep)
```

## 3. Importing Geospatial Data

### 3.1. Importing polygon features

This code chunk uses **st_read()** function of **sf** package to import Hunan county boundary layer ESRI shapefile into R as a polygon feature data frame.

st_read() uses two arguments:

-   `dsn`to define the data path

-   `layer` to provide the shapefile name

```{r}
hunan_sf = st_read(dsn = "data/geospatial", 
                  layer = "Hunan")
```

The message above reveals that the geospatial objects are multipolygon features. There are a total of 88 multipolygon features and 7 fields in `hunan` simple feature data frame. `hunan` is in **WGS 84** projected coordinates systems. The bounding box provides the x extend and y extend of the data.

## 4. Checking the Content of A Simple Feature Data Frame

### 4.1. Working with *st_geometry()*

The column in the sf data.frame that contains the geometries is a list, of class `sfc`. We can retrieve the geometry list-column in this case by hunan\$geom or hunan\[\[1\]\], but the more general way uses *st_geometry()* as shown in the code chunk below.

```{r}
st_geometry(hunan_sf)
```

### 4.2. Working with glimpse()

**glimpse()** report of **dplyr** reveals the data type of each fields. For example, `Shape Area` `Shape Length` fields are **double-precision values,** `ID_3` field is in **integer** data type.

```{r}
glimpse(hunan_sf)
```

### 4.3. Working with *head()*

```{r}
# To fetch the first 5 rows of hunan dataset.
head(hunan_sf, n=5)
```

The below code chunk uses ***st_crs()*** of **sf** package pulls the coordinate system of `hunan_sf`.

```{r}
st_crs(hunan_sf)
```

`hunan_sf` data frame is projected in WGS 84, when we read until the end of the print, it indicates that the EPSG is 4326. This is the correct EPSG code for WGS 84, it should be [4326](https://support.virtual-surveyor.com/en/support/solutions/articles/1000261351-what-is-wgs84-#:~:text=The%20WGS84%20Coordinate%20Systems%20adds,EPSG%20code%2C%20which%20is%204326.). Hence, there is no need for correction, use of *st_set_crs()* of **sf** package.

## 5. Plotting Geospatial Data

The code chunk below pulls multi-plot of all attributes.

```{r}
plot(hunan_sf)
```

The code chunk below plots only the geometry.

```{r}
plot(st_geometry(hunan_sf))
```

## 6. Importing Attribute (Aspatial) Data in csv into R

This code chunks below will import Dictionary.xlsx (optional) and Hunan_2012.csv into R. We will use ***read_csv()***of **readr** package to import Hunan_2012.csv. The output is R dataframe class called `hunan2012`.

```{r}
dict <- readxl::read_excel("/Users/ridz/ridhicar/ISSS624/In-class_Ex/In-class_Ex1/data/aspatial/Dictionary.xlsx")
```

```{r}
hunan2012 <- read_csv("/Users/ridz/ridhicar/ISSS624/In-class_Ex/In-class_Ex1/data/aspatial/Hunan_2012.csv")
```

### 6.1 Working with *list()*

The code chunk below shows ***list()*** of Base R instead of *glimpse()*, used to examine if the data file, `hunan2012` has been imported correctly.

```{r}
list(hunan2012)
```

The output reveals that `hunan2012` tibble data frame consists of 88 rows and 29 columns.\

## 7. Performing relational join

The code chunk below uses ***left_join(dataframe1, dataframe2)*** of **dplyr** package to create a new table `hunan`, joining the attribute table of hunan's SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe.

```{r}
hunan <- left_join(hunan_sf, hunan2012)
```

## 8. Visualising Regional Development Indicator

The code chunk below draws a chloropeth map showing the distribution of GDPPC 2012 by using ***qtm()*** of **tmap** package.

```{r}
basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text("NAME_3", size=0.4) 

gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2) 
```

## 9. Computing Contiguity Spatial Weights

We will use ***poly2nb()*** of **spdep** package to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries.

### 9.1 Computing (QUEEN) contiguity based on neighbours

The code chunk below is used to compute the Queen contiguity weight matrix. The "queen" argument takes TRUE (default) or FALSE as option. The function will return a list of first order neighbours using the Queen criteria.

```{r}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
```

The summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one heighbours.

For each polygon in our polygon object, *wm_q* lists all neighboring polygons. For example, to see the neighbors for the 11th polygon in the object, type:

```{r}
wm_q[[11]]
```

Polygon 11 has 3 neighbors. The numbers represent the polygon IDs as stored in hunan SpatialPolygonsDataFrame class.

Using the code chunk below, we can retrieve the county name of Polygon ID=11:

```{r}
hunan$County[11]
```

The output reveals that Polygon ID=11 is Guidong county.

The code chunk below is used to reveal the county names of the three neighboring polygons:

```{r}
hunan$NAME_3[c(14,17,72)]
```

The code chunk below is used to retrieve the GDPPC of these three countries i.e., "Rucheng", "Zixing", "Yanling":

```{r}
# nb11 <- to see the neighbors for the 11th polygon in the object
nb11 <- wm_q[[11]]
# To retrieve the GPPPC of Polygon ID=11
nb11 <- hunan$GDPPC[nb11]
nb11
```

The printed output above shows that the GDPPC of the three nearest neighbours based on Queen's method are 11286, 65706 and 21021 respectively.

Similarly, to see the neighbors for the first polygon in the object, type:

```{r}
wm_q[[1]]
```

Polygon 1 has 5 neighbors. The numbers represent the polygon IDs as stored in hunan SpatialPolygonsDataFrame class.

The code chunk below retrieves the county name of Polygon ID=1:

```{r}
hunan$County[1]
```

The output reveals that Polygon ID=1 is Anxiang county.

The code chunk below is used to reveal the county names of the five neighboring polygons:

```{r}
hunan$NAME_3[c(2,3,4,57,85)]
```

The code chunk below is used to retrieve the GDPPC of these three countries i.e., "Hanshou", "Jinshi", "Li", "Nan", "Taoyuan":

```{r}
# nb1 <- to see the neighbors for the first polygon in the object
nb1 <- wm_q[[1]]
# To retrieve the GPPPC of Polygon ID=1
nb1 <- hunan$GDPPC[nb1]
nb1
```

The printed output above shows that the GDPPC of the three nearest neighbours based on Queen's method are 20981, 34592, 24473, 21311 and 22879 respectively.

The code chunk below displays the complete weight matrix by using ***str()***.

```{r}
str(wm_q)
```

### 9.2 Creating (ROOK) contiguity based on neighbours

The code chunk below is used to compute Rook contiguity weight matrix. The "queen" argument takes TRUE (default) or FALSE as option. Setting "queen" to FALSE means Rook contiguity weight matrix.

```{r}
wm_r <- poly2nb(hunan, queen=FALSE)
summary(wm_r)
```

The summary report above shows that there are 88 area units in Hunan. The most connect area unit has 10 neighbours. There are two area units with only one neighbours.

## 9.3 Visualizing contiguity weights

We can visualize contiguity weights using a connectivity graph. A connectivity graph takes a point and then displays a line to each neighbouring point. So far, we have been working with polygons, we need to get points in order to make our connectivity graphs. The most method typical method for this will be polygon centroids. We will use function(s) from the **sf** package to pull the Latitude and Longitude of the Polygon Centroids.

We need the coordinates in a separate dataframe, this can be done using the mapping function. The mapping function i.e., ***map_dbl(input_vector, function)*** of **map** from the **purr** package, applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the `geometry` column of `hunan`, the function will be **st_centroid.**

```{r}
# [[1]] <- to get the longitude only, i.e., the first value in each centroid.
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

```{r}
# [[2]] <- to get the latitude only, i.e., the second value in each centroid.
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

```{r}
# To put both longitude and latitude in the same object.
coords <- cbind(longitude, latitude)
```

```{r}
# To pull the first 5 observations
head(coords,n=5)
```

### 9.3.1 Plotting Queen contiguity based on neighbours map

The code chuck below plots the Queen contiguity weight matrix (derived earlier) based on neighbours map.

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
```

### 9.3.2 Plotting Rook contiguity based on neighbours map

The code chuck below plots the Rook contiguity weight matrix (derived earlier) based on neighbours map.

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
```

### 9.3.3 Plotting both Queen and Rook contiguity based on neighbours map

The code chuck below plots both Queen and Rook contiguity weight matrices (derived earlier) based on neighbours map, side by side.

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red", main="Queen Contiguity")
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red", main="Rook Contiguity")
```

## 10. Computing distance based neighbours

In this section, we will use ***dnearneigh()*** of **spdep** package to derive the distance-based weight matrices.

The function identifies neighbours of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument. If unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in **km** will be calculated assuming the WGS84 reference ellipsoid.

### 10.1 Determine the cut-off distance

In this section, we will follow a series of steps to determine the upper limit for the distance. This involves:

-   Return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using [***knearneigh()***](https://r-spatial.github.io/spdep/reference/knearneigh.html) of **spdep**.

-   Convert the knn object returned by *knearneigh()* into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using [***knn2nb()***](https://r-spatial.github.io/spdep/reference/knn2nb.html)**.**

-   Return the length of neighbour relationship edges by using [***nbdists()***](https://r-spatial.github.io/spdep/reference/nbdists.html) of **spdep**. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.

-   Remove the list structure of the returned object by using [*unlist()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/unlist)*.*

    ```{r}
     # coords <- coordinates(hunan)
    k1 <- knn2nb(knearneigh(coords))
    k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
    summary(k1dists)
    ```

The summary above shows that the largest first nearest neighbour distance i.e., the Max. is 61.79 km, so using this as the upper threshold gives us certainty that all units will have at least one neighbour.

### 10.2 Computing fixed distance weight matrix

The code chunk below will compute the distance weight matrix by using ***dnearneigh().***

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

The summary report above shows that there are on average at least 3\* neighbours per area unit.

The code chunk below is used to display the content of wm_d62 weight matrix.

```{r}
str(wm_d62)
```

The code chunk below displays the structure of the weight matrix by combining ***table()*** and ***card()*** of the **spdep** package.

```{r}
table(hunan$County, card(wm_d62))
```

```{r}
n_comp <- n.comp.nb(wm_d62)
n_comp$nc
```

```{r}
table(n_comp$comp.id)
```

#### 10.2.1 Plotting fixed distance weight matrix

The code chunk below plots the distance weight matrix.

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE)
plot(k1, coords, add=TRUE, col="red", length=0.08)
```

\
The red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.

The code chunk below plots 2 subplots. The first subplot's Red lines shows the 1st nearest neighbours. The second subplot's Black lines show the lists of neighbours within the cut-off distance of 62 km.

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey")
plot(k1, coords, add=TRUE, col="red", length=0.08, main="1st nearest neighbours")
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6, main="Distance link")
```

### 10.3 Computing adaptive distance weight matrix

One of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.

We can control the number of neighbours directly using k-nearest neighbours, either by accepting asymmetric neighbours or by imposing symmetry. The code chunk below sets k equal to 6 nearest neighbours.

```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
```

The code chunk below displays the content of the matrix knn6. Each county will have six neighbours.

```{r}
str(knn6)
```

#### 10.3.1 Plotting distance based on neighbours

```{r}
plot(hunan$geometry, border="lightgrey")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

## 11. Weights based on IDW

In this section, we derive the spatial weight matrix based on the Inversed Distance method.

The code chunk below computes the distances between ares using ***nbdists()*** of the **spdep** package.

```{r}
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
ids
```

### 11.1 Row-standardized weights matrix

Next, we need to assign weights to each neighbouring polygon. In our case, each neighbouring polygon will be assigned equal weight (style="W"). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors' values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we'll stick with the style="W" option for simplicity's sake but note that other more robust options are available, notably style="B".

The zero.policy=TRUE option allows for lists of non-neighbours. This should be used with caution as the user may not be aware of missing neighbours in his/her dataset However, a zero.policy = FALSE will return an error, see below.

```{r}
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
rswm_q
```

The code chunk below will pull the weight of the first polygon's four neighbours type.

```{r}
rswm_q$weights[10]
```

Each neighbor is assigned a 0.2 of the total weight. This means that when R computes the average neighboring income values, each neighbor's income will be multiplied by 0.2 before being tallied.

The code chunk below derives a row standardized distance weight matrix, this is done by setting style ="B".

```{r}
rswm_ids <- nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
rswm_ids
```

```{r}
rswm_ids$weights[1]
```

```{r}
summary(unlist(rswm_ids$weights))
```

## 12. Application of Spatial Weight Matrix

### 12.1 Spatial lag with row-standardized weights

The code chunk below is used to compute the average neighbour GDPPC value for each polygon. These values are oftern referred to as **spatially lagged values**.

```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
GDPPC.lag
```

The code chunk below GDPPC of these five countries.

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

The code chunk below is used to append the spatially lag GDPPC values onto hunan sf data frame.

```{r}
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan <- left_join(hunan,lag.res)
```

The code chunk below is used to show the average neighbouring income values (stored in the Inc.lag object) for each county.

```{r}
head(hunan)
```

The code chunk below plots the GDPPC and spatial lag GDPPC for comparison.

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```

### 12.2 Spatial lag as a sum of neighbouring values

We can calculate spatial lag as a sum of neighboring values by assigning binary weights. This requires us to go back to our neighbors list, then apply a function that will assign binary weights, then we use glist = in the nb2listw function to explicitly assign these weights.

We start by applying a function that will assign a value of 1 per each neighbor. This is done with lapply, which we have been using to manipulate the neighbors structure throughout the past notebooks. Basically it applies a function across each value in the neighbors structure.

```{r}
b_weights <- lapply(wm_q, function(x) 0*x + 1)
b_weights2 <- nb2listw(wm_q, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

The code chunk blow uses lag.listw to compute a lag variable from our weight and GDPPC.

```{r}
lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
```

```{r}
lag_sum
```

The code chunk below appends la_sum GDPPC field into `hunan` sf data frame using ***left_join().***

```{r}
hunan <- left_join(hunan, lag.res)
```

The code chunk below is used to plot both the GDPPC and Spatial Lag Sum GDPPC for comparison.

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
```

### 11.3 Spatial window average

The spatial window average uses row-standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbors structure and add the diagonal element before assigning weights. To begin we assign k6 to a new variable because we will directly alter its structure to add the diagonal elements.

```{r}
wm_q1 <- wm_q
```

To add the diagonal element to the neighbour list, we just need to use *include.self()* from **spdep**.

```{r}
include.self(wm_q1)
```

The code chunk below is used to obtain weights using ***nb2listw()**.*

```{r}
wm_q1 <- nb2listw(wm_q1)
wm_q1
```

The code chunk below is used to create the lag variable from our weight structure and GDPPC variable.

```{r}
lag_w_avg_gpdpc <- lag.listw(wm_q1, 
                             hunan$GDPPC)
lag_w_avg_gpdpc
```

The code chunk below converts the lag variable listw object into a data.frame by using ***as.data.frame()***.

```{r}
lag.list.wm_q1 <- list(hunan$NAME_3, lag.listw(wm_q1, hunan$GDPPC))
lag_wm_q1.res <- as.data.frame(lag.list.wm_q1)
colnames(lag_wm_q1.res) <- c("NAME_3", "lag_window_avg GDPPC")
```

Note: The third command line on the code chunk above renames the field names of *lag_wm_q1.res* object into *NAME_3* and *lag_window_avg GDPPC* respectively.

Next, the code chunk below will be used to append *lag_window_avg GDPPC* values onto *hunan* sf data.frame by using *left_join()* of **dplyr** package.

```{r}
hunan <- left_join(hunan, lag_wm_q1.res)
```

Lastly, *qtm()* of **tmap** package is used to plot the GDPPC and lag_window_avg GDPPC map next to each other for quick comparison.

```{r}
gdppc <- qtm(hunan, "GDPPC")
w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC")
tmap_arrange(gdppc, w_avg_gdppc, asp=1, ncol=2)
```

Note: For more effective comparison, it is advicible to use the core tmap mapping functions.

### 11.4 Spatial window sum

The spatial window sum is the counter part of the window average, but without using row-standardized weights. To do this we assign binary weights to the neighbor structure that includes the diagonal element.

```{r}
wm_q1 <- wm_q
```

To add the diagonal element to the neighbour list, we just need to use *include.self()* from **spdep**.

```{r}
include.self(wm_q1)
```

```{r}
wm_q1
```

Next, we will assign binary weights to the neighbour structure that includes the diagonal element.

```{r}
b_weights <- lapply(wm_q1, function(x) 0*x + 1)
b_weights[1]
```

Again, we use *nb2listw()* and *glist()* to explicitly assign weight values.

```{r}
b_weights2 <- nb2listw(wm_q1, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

With our new weight structure, we can compute the lag variable with *l**ag.listw()***.

```{r}
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc
```

Next, we will convert the lag variable listw object into a data.frame by using ***as.data.frame()***.

```{r}
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")
```

Note: The second command line on the code chunk above renames the field names of *w_sum_gdppc.res* object into *NAME_3* and *w_sum GDPPC* respectively.

Next, the code chunk below will be used to append *w_sum GDPPC* values onto *hunan* sf data.frame by using *left_join()* of **dplyr** package.

```{r}
hunan <- left_join(hunan, w_sum_gdppc.res)
```

Lastly, *qtm()* of **tmap** package is used to plot the GDPPC and lag_sum GDPPC map next to each other for quick comparison.

```{r}
gdppc <- qtm(hunan, "GDPPC")
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(gdppc, w_sum_gdppc, asp=1, ncol=2)
```

Note: For more effective comparison, it is advicible to use the core tmap mapping functions.
